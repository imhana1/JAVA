11. 사용자 정보를 추가하기
- 뭔가를 저장하는것을 상태(state)라고 한다
- Http는 stateless(무상태): 서버는 사용자를 구별하지 못한다
    예를 들어 사진 5장을 포함한 111번 글이 있다고 하자
    프론트는 111번 글, 사진5장 총 6개의 request를 서버로 보내
    서버는 이 6개의 요청을 보낸 프론트가 동일인인지 여부를 알지 못해
 11-1. cookie: 사용자 정보를 사용자 컴퓨터에 저장 -> 보안에 매우 취약
    사이트가 사용자의 컴퓨터에 cookie를 적어 -> 사이트에 다시 접속하면 cookie가 헤더에 담겨 자동으로 전송
    남이 내 컴에 무언가를 적는 것 자체가 위험!
 11-2. session: 사용자 정보를 서버의 메모리에 저장
    사용자가 누군지 모른다며?
 11-3. database: 사용자 정보를 영구 저장

11.1. cookie
- 예를 들어 naver가 상태 정보를 사용자 pc에 저장
    - 쿠키에는 수명을 지정할 수 있다. 예를들어 3600이라고 주면 1시간
- naver에 접근할 경우 네이버에서 수신한 쿠키가 네이버로 자동전송(비효율적)


11.2. HttpSession (session은 폼로그인방식에서 사용?)
- 서버에 사용자 상태를 저장 -> 아니 근데 사용자 구별 못한다며?
- sessionId라고 하는 쿠키를 이용해 사용자를 구별
- 시나리오
    1. a라는 사용자가 네이버에 접근 -> a가 가진 쿠키들이 네이버로 자동전송
    2. 네이버는 쿠키를 까서 sessionId를 찾아
       쿠키에 세션 아이디가 없다면(= 새로운 접근이다) 새로운 sessionId를 생성해서 쿠키에 기록
        "사용자의 session이 없으면 sessionId가 처음 만들어져~"
    3. 이제 네이버는 요청의 sessionId가 같다면 동일한 사용자로 간주
       "사용자가 누군지는 몰라. sessionId만 보는거야"
- sesison 까서 sessionId만 빼면 동일한 사용자처럼 할 수 있지(JS로 가능)
    => 세션 하이재킹
  Spring Security 쓰면 세션 아이디가 계속 바뀜?
* spring은 session 필요하면 파라미터로 Httpsession session 적어주면 됨 (ex MemberController 내정보보기)


* session이라는 개념은 웹브라우저용 -> 아이폰, 안드로이드 등은 사용x 웹브라우저 사용해야 쿠키나 세션 사용 가능
    수동으로 쿠키 저장하는 코드 짜고 자동으로 보내게 하면 개념상으로는 가능은 하긴 해 = 내가 웹브라우저역할을 대신해야해