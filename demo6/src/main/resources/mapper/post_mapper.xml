<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo6.dao.PostDao">
<!--    select sql 은 반드시 결과 값의 타입을 지정해야한다. 지정하지 않으면 resultMap 이 없다는 오류 발생-->
    <select id="count" resultType="int">
        select count(*) from posts
    </select>
    <!-- resultType 에 사용자 정의 클래스를 적을 때는 FQN 으로 -->
    <select id="findByPno" resultType="com.example.demo6.entity.Post">
        select * from POSTS where PNO = #{pno}
    </select>

    <insert id="save">
        <selectKey resultType="int" keyProperty="pno" order="BEFORE">
            select posts_seq.nextval from dual
        </selectKey>
        insert into posts values(#{pno}, #{title}, #{content}, #{writeTime}, #{writer}, #{readCnt}, #{goodCnt}, #{badCnt})
    </insert>

    <select id="findAll" resultType="com.example.demo6.entity.Post">
-- // select * from posts order by pno desc offset 시작위치 rows fetch next 개수 rows only
-- // pageno == 1        offset 0 rows fetch next 10 rows only
-- // pageno == 2        offset 10 rows fetch next 10 rows only
        select PNO, TITLE, WRITER, WRITE_TIME, READ_CNT from posts order by pno desc offset (#{pageno}-1) * #{pagesize} rows fetch next #{pagesize} rows only
    </select>

    <update id="increaseReadCnt">
        update posts set read_cnt = read_cnt + 1 where pno = #{pno}
    </update>

    <resultMap id="mapForRead" type="map">
        <!-- pno 컬럼을 읽어서 map 또는 dto 에 pno 란 이름으로 추가해라 -->
        <id property="pno" column="pno" />
        <result property="title" column="title" />
        <result property="content" column="content" javaType="java.lang.String" jdbcType="CLOB" />
        <result property="writer" column="writer" />
        <result property="writerTime" column="writerTime" javaType="java.time.LocalDateTime" jdbcType="DATE" />
        <result property="readCnt" column="read_cnt" />
        <result property="goodCnt" column="good_cnt" />
        <result property="badCnt" column="bad_cnt" />
        <!-- List<Comment> comments -->
        <!-- 자바에서 Collection 은 List 의 부모 -->
        <!-- Collection<Comment> comments = new List() -->
        <collection property="comments" ofType="com.example.demo6.entity.Comment" javaType="java.util.List">
            <id property="cno" column="c_cno"/>
            <result property="content" column="c_content" />
            <result property="writer" column="c_writer"/>
            <result property="writeTime" column="c_write_time" javaType="java.time.LocalDateTime" jdbcType="DATE" />
            <result property="pno" column="c_pno"/>
        </collection>
    </resultMap>

    <select id="findByPnoWithComments" resultMap="mapForRead">
        select
            p.PNO, p.TITLE, p.CONTENT, p.WRITER, p.WRITE_TIME, p.READ_CNT, p.GOOD_CNT, p.BAD_CNT,
            c.cno as c_cno, c.CONTENT as c_content, c.WRITER as c_writer, c.WRITE_TIME as c_write_time, c.pno as c_pno
        from posts p left outer join comments c on p.PNO=c.pno where p.PNO=#{pno}
    </select>
</mapper>





















